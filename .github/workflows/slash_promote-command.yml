name: "[Slash] Promote Command"
on:
  repository_dispatch:
    types: [promote-command]
jobs:
  promoteCommand:
    runs-on: ubuntu-latest
    steps:
      # ! deprecated, remove once dispatch workflows are sufficient
      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      # Store secret for dev hub
      - name: "Populate auth file with PROD_SFDX_URL secret"
        shell: bash
        run: "echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt"

      # Store secret for package target org installation
      - name: "Populate auth file with PREPROD_SFDX_URL secret"
        shell: bash
        run: "echo ${{ secrets.PREPROD_SFDX_URL}} > ./PREPROD_SFDX_URL.txt"

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: "sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d"

      # Authenticate preprod
      - name: "Authenticate package target org"
        run: "sfdx force:auth:sfdxurl:store -f ./PREPROD_SFDX_URL.txt -a preprod -s"

      # Remove auth file
      - name: "Remove auth files"
        run: |
          rm -f ./PROD_SFDX_URL.txt
          rm -f ./PREPROD_SFDX_URL.txt

      # Promote package
      - name: "Promote package"
        run: "sfdx force:package:version:promote --package ${{ github.event.client_payload.slash_command.arg1 }} --noprompt"

      # Install new package version into preprod
      - name: "Install new package version into preprod org"
        if: success()
        run: sfdx force:package:install --package ${{ github.event.client_payload.slash_command.arg1 }} -w 20 -b 20 -u preprod -r -k ${{ secrets.PACKAGE_KEY }} --json

      # set variables
      - name: "Set release fields"
        if: success()
        id: release-fields
        run: |
          echo "::set-output name=tagName::v$(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')"
          echo "::set-output name=releaseName::$(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')"
          echo "::set-output name=bodyVersion::$(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')"

      # create github release
      - name: "Create Release"
        if: success()
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.release-fields.outputs.tagName}}
          release_name: ${{steps.release-fields.outputs.releaseName}}
          body: |
            **Version**: ${{ steps.release-fields.outputs.bodyVersion }}
            **Package ID**: ${{ github.event.client_payload.slash_command.arg1 }}
            **Author**: ${{ github.event.client_payload.slash_command.arg2 }}

            ${{ github.event.client_payload.slash_command.unnamed_args }}
          draft: false
          prerelease: false

      # Update version number
      - name: "Update version number"
        id: packaging-updater
        uses: navikt/github-action-sfdx-version-updater@master

      # Create commit message by extracting the latest version number from sfdx-project.json
      - name: "Build commit message"
        id: build-commit-message
        run: |
          echo "::set-output name=message::(CI) Updated to new version number $(cat sfdx-project.json | jq '.packageDirectories[0].versionNumber' -r | sed 's/.\{5\}$//')"
          cat sfdx-project.json

      # # Create pull request
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v2
      #   with:
      #     title: ${{steps.build-commit-message.outputs.message}}
      #     body: |
      #       Please merge me to update my version number :heart_eyes:

      #       **You do NOT have to wait for my tests to finish, because they will never finish!**
      #       Simply use your admin privileges to merge me :smirk: (but just this once!)
      #     commit-message: ${{steps.build-commit-message.outputs.message}}

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "${{steps.build-commit-message.outputs.message}}" -a
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Add success reaction
      - name: "Add success reaction"
        if: success()
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray

      # Add error reaction
      - name: "Add error reaction"
        if: failure()
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: "-1"
          body: |
            [Command run output][1]

            [1]: ${{ steps.vars.outputs.run-url }}
